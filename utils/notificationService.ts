import messaging from '@react-native-firebase/messaging';
import { getToken } from './authServices';
import { Platform, PermissionsAndroid, Alert } from 'react-native';
import * as Notifications from 'expo-notifications';

import './notificationBackgroundHandler';

// ADICIONAR ESTA CONFIGURA√á√ÉO CRUCIAL PARA FOREGROUND
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,    // Mostra a anima√ß√£o na tela
    shouldPlaySound: true,    // Toca o som
    shouldSetBadge: true,     // Atualiza o badge
  }),
});

const resolvedApiBaseUrl = process.env.EXPO_PUBLIC_API_BASE_URL;

if (!resolvedApiBaseUrl) {
  console.error("API_BASE_URL n√£o est√° definida. Verifique sua configura√ß√£o .env");
}

// Interface para notifica√ß√µes
export interface NotificationData {
  id: string;
  title: string;
  body: string;
  read: boolean;
  createdAt: string;
  type?: string;
  data?: any;
}

// Constantes para AuthorizationStatus (API v22)
const AUTHORIZATION_STATUS = {
  NOT_DETERMINED: -1,
  DENIED: 0,
  AUTHORIZED: 1,
  PROVISIONAL: 2,
} as const;

export const notificationService = {
  // Fun√ß√£o para obter contagem de notifica√ß√µes n√£o lidas
  async getUnreadCount(): Promise<number> {
    try {
      const token = await getToken();
      if (!token) {
        console.log('Token n√£o encontrado para buscar notifica√ß√µes');
        return 0;
      }

      const response = await fetch(`${resolvedApiBaseUrl}/notifications/unread-count`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        console.log('Endpoint de contagem n√£o encontrado, retornando 0');
        return 0;
      }

      const data = await response.json();
      return data.count || 0;
    } catch (error) {
      console.log('Endpoint de notifica√ß√µes n√£o implementado no backend ainda');
      return 0;
    }
  },

  // Obter todas as notifica√ß√µes do usu√°rio
  async getUserNotifications(page: number = 1, limit: number = 20): Promise<any> {
    try {
      const token = await getToken();
      if (!token) {
        console.log('Token n√£o encontrado para buscar notifica√ß√µes');
        return { notifications: [], total: 0, page: 1, totalPages: 0 };
      }

      const response = await fetch(`${resolvedApiBaseUrl}/notifications?page=${page}&limit=${limit}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        console.log('Endpoint de notifica√ß√µes n√£o encontrado no backend');
        return { notifications: [], total: 0, page: 1, totalPages: 0 };
      }

      const data = await response.json();
      
      return {
        notifications: data.notifications || [],
        total: data.total || 0,
        page: data.page || page,
        totalPages: data.totalPages || 0
      };
    } catch (error) {
      console.log('Endpoint de notifica√ß√µes n√£o implementado no backend ainda');
      return { notifications: [], total: 0, page: 1, totalPages: 0 };
    }
  },

  // Fun√ß√£o para marcar notifica√ß√£o como lida
  async markAsRead(notificationId: string): Promise<boolean> {
    try {
      const token = await getToken();
      if (!token) return false;

      const response = await fetch(`${resolvedApiBaseUrl}/notifications/${notificationId}/mark-read`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      return response.ok;
    } catch (error) {
      console.log('Fun√ß√£o de marcar como lida n√£o implementada no backend ainda');
      return false;
    }
  },

  // FUN√á√ÉO CORRIGIDA: Marcar todas as notifica√ß√µes como lidas
  async markAllAsRead(): Promise<boolean> {
    try {
      console.log('üîÑ [markAllAsRead] Iniciando fun√ß√£o...');
      const token = await getToken();
      if (!token) {
        console.log('‚ùå [markAllAsRead] Token n√£o encontrado');
        return false;
      }

      console.log('üì§ [markAllAsRead] Fazendo requisi√ß√£o para marcar todas como lidas...');
      const response = await fetch(`${resolvedApiBaseUrl}/notifications/mark-all-read`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        console.log('‚úÖ [markAllAsRead] Todas as notifica√ß√µes marcadas como lidas');
        return true;
      } else {
        console.log('‚ùå [markAllAsRead] Erro ao marcar todas como lidas:', response.status);
        const errorText = await response.text();
        console.log('[markAllAsRead] Resposta do servidor:', errorText);
        return false;
      }
    } catch (error) {
      console.log('‚ùå [markAllAsRead] Erro de conex√£o:', error);
      return false;
    }
  },

  // Fun√ß√£o para adicionar listener de notifica√ß√µes recebidas - MELHORADA
  addNotificationReceivedListener(callback: () => void) {
    try {
      // Handler para quando o app est√° aberto (foreground) - Firebase
      const unsubscribeForeground = messaging().onMessage(async remoteMessage => {
        console.log('üì± Notifica√ß√£o recebida em foreground:', remoteMessage);
        
        // CRIAR E MOSTRAR NOTIFICA√á√ÉO LOCAL PARA FOREGROUND
        if (remoteMessage.notification) {
          await Notifications.scheduleNotificationAsync({
            content: {
              title: remoteMessage.notification.title || 'Nova Notifica√ß√£o',
              body: remoteMessage.notification.body || '',
              data: remoteMessage.data || {},
              sound: true,
            },
            trigger: null, // Mostrar imediatamente
          });
        }
        
        callback();
      });

      // Handler para quando o usu√°rio toca na notifica√ß√£o (app em background)
      const unsubscribeBackground = messaging().onNotificationOpenedApp(remoteMessage => {
        console.log('üëÜ Notifica√ß√£o aberta (app estava em background):', remoteMessage);
        callback();
      });

      // ADICIONAR listener para notifica√ß√µes do Expo tamb√©m
      const expoSubscription = Notifications.addNotificationReceivedListener(notification => {
        console.log('üì± Notifica√ß√£o Expo recebida:', notification);
        callback();
      });

      return {
        remove: () => {
          unsubscribeForeground();
          unsubscribeBackground();
          expoSubscription.remove();
        }
      };
    } catch (error) {
      console.error('Erro ao adicionar listener de notifica√ß√£o:', error);
      return {
        remove: () => {}
      };
    }
  },

  // Solicitar permiss√£o de notifica√ß√µes (CORRIGIDA PARA API v22)
  async requestNotificationPermission(): Promise<boolean> {
    try {
      console.log('üîî Solicitando permiss√£o para notifica√ß√µes...');

      if (Platform.OS === 'android') {
        // Para Android 13+ (API 33+), usar PermissionsAndroid
        if (Platform.Version >= 33) {
          console.log('üì± Android 13+ - Solicitando permiss√£o POST_NOTIFICATIONS');
          
          const granted = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS,
            {
              title: 'Permiss√£o para Notifica√ß√µes',
              message: 'O HortaShop precisa da sua permiss√£o para enviar notifica√ß√µes sobre seus pedidos e promo√ß√µes.',
              buttonNeutral: 'Perguntar depois',
              buttonNegative: 'Negar',
              buttonPositive: 'Permitir',
            }
          );

          if (granted === PermissionsAndroid.RESULTS.GRANTED) {
            console.log('‚úÖ Permiss√£o para notifica√ß√µes concedida');
            return true;
          } else {
            console.log('‚ùå Permiss√£o para notifica√ß√µes negada');
            
            Alert.alert(
              'Notifica√ß√µes Desabilitadas',
              'Voc√™ n√£o receber√° notifica√ß√µes sobre pedidos e promo√ß√µes. Voc√™ pode ativar nas configura√ß√µes do app.',
              [{ text: 'OK' }]
            );
            return false;
          }
        } else {
          // Para Android < 13, usar Firebase Messaging (API v22)
          const authorizationStatus = await messaging().requestPermission();
          const enabled = authorizationStatus === AUTHORIZATION_STATUS.AUTHORIZED;
          
          console.log(enabled ? '‚úÖ Permiss√£o Firebase concedida' : '‚ùå Permiss√£o Firebase negada');
          return enabled;
        }
      } else {
        // Para iOS (API v22)
        const authorizationStatus = await messaging().requestPermission();
        const enabled = authorizationStatus === AUTHORIZATION_STATUS.AUTHORIZED || 
                        authorizationStatus === AUTHORIZATION_STATUS.PROVISIONAL;

        console.log(enabled ? '‚úÖ Permiss√£o iOS concedida' : '‚ùå Permiss√£o iOS negada');
        return enabled;
      }
    } catch (error) {
      console.error('‚ùå Erro ao solicitar permiss√£o:', error);
      return false;
    }
  },

  // Verificar permiss√µes existentes (API v22)
  async checkNotificationPermissions(): Promise<boolean> {
    try {
      console.log('üîç Verificando permiss√µes de notifica√ß√£o...');
      
      if (Platform.OS === 'android') {
        if (Platform.Version >= 33) {
          // Android 13+
          const granted = await PermissionsAndroid.check(
            PermissionsAndroid.PERMISSIONS.POST_NOTIFICATIONS
          );
          console.log('üì± Status permiss√£o Android 13+:', granted);
          return granted;
        } else {
          // Android < 13 (API v22)
          const authorizationStatus = await messaging().hasPermission();
          const hasPermission = authorizationStatus === AUTHORIZATION_STATUS.AUTHORIZED;
          console.log('üì± Status permiss√£o Android (Firebase):', hasPermission);
          return hasPermission;
        }
      } else {
        // iOS (API v22)
        const authorizationStatus = await messaging().hasPermission();
        const hasPermission = authorizationStatus === AUTHORIZATION_STATUS.AUTHORIZED || 
                             authorizationStatus === AUTHORIZATION_STATUS.PROVISIONAL;
        console.log('üì± Status permiss√£o iOS:', hasPermission);
        return hasPermission;
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar permiss√µes:', error);
      return false;
    }
  },

  // Inicializar Firebase FCM (API v22)
  async initializeNotifications(): Promise<boolean> {
    try {
      console.log('üöÄ Inicializando Firebase FCM...');
      
      // 1. Verificar se j√° tem permiss√£o
      const hasPermission = await this.checkNotificationPermissions();
      
      if (!hasPermission) {
        console.log('üîî Permiss√£o n√£o concedida, solicitando...');
        const granted = await this.requestNotificationPermission();
        
        if (!granted) {
          console.log('‚ùå Usu√°rio negou permiss√£o para notifica√ß√µes');
          return false;
        }
      } else {
        console.log('‚úÖ Permiss√£o j√° concedida anteriormente');
      }

      // 2. Verificar se h√° uma notifica√ß√£o que abriu o app (quando estava fechado)
      const initialNotification = await messaging().getInitialNotification();
      if (initialNotification) {
        console.log('üöÄ App foi aberto por uma notifica√ß√£o (estava fechado):', initialNotification);
        if (initialNotification.data?.type === 'order_update') {
          console.log('üìã Redirecionando para detalhes do pedido:', initialNotification.data.orderId);
        }
      }

      console.log('‚úÖ Firebase FCM inicializado com sucesso');
      console.log('‚úÖ Background message handler j√° configurado');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao inicializar Firebase FCM:', error);
      return false;
    }
  },

  // Registrar token FCM (API v22 CORRIGIDA)
  async reRegisterToken() {
    try {
      console.log('üîÑ Re-registrando token FCM...');
      
      const fcmToken = await messaging().getToken();
      
      if (!fcmToken) {
        console.log('‚ùå N√£o foi poss√≠vel obter token FCM');
        return null;
      }

      console.log('üî• TOKEN FCM COMPLETO PARA DEBUG:', fcmToken);
      console.log('üì± Token FCM obtido:', fcmToken.substring(0, 50) + '...');
      
      const authToken = await getToken();
      if (authToken && resolvedApiBaseUrl) {
        try {
          const response = await fetch(`${resolvedApiBaseUrl}/notifications/register-token`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${authToken}`,
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              token: fcmToken,
              platform: Platform.OS
            })
          });

          if (response.ok) {
            console.log('‚úÖ Token FCM enviado para o backend com sucesso');
          } else {
            const errorText = await response.text();
            console.log('‚ùå Erro ao registrar token no backend:', response.status);
            console.log('Resposta:', errorText);
          }
        } catch (error) {
          console.log('‚ùå Erro de conex√£o ao registrar token:', error);
        }
      }

      console.log('‚úÖ Token de notifica√ß√£o re-registrado com sucesso');
      return fcmToken;
    } catch (error) {
      console.error('‚ùå Erro ao obter token FCM:', error);
      return null;
    }
  },

  // Fun√ß√£o para lidar com tokens atualizados (API v22)
  onTokenRefresh(callback: (token: string) => void) {
    try {
      return messaging().onTokenRefresh(callback);
    } catch (error) {
      console.error('Erro ao configurar listener de token refresh:', error);
      return () => {};
    }
  },

  // FUN√á√ÉO: Deletar notifica√ß√£o
  async deleteNotification(notificationId: string): Promise<boolean> {
    try {
      const token = await getToken();
      if (!token) return false;

      const response = await fetch(`${resolvedApiBaseUrl}/notifications/${notificationId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        console.log('‚úÖ Notifica√ß√£o deletada com sucesso');
        return true;
      } else {
        console.log('‚ùå Erro ao deletar notifica√ß√£o:', response.status);
        return false;
      }
    } catch (error) {
      console.log('‚ùå Erro de conex√£o ao deletar notifica√ß√£o:', error);
      return false;
    }
  },

  // FUN√á√ÉO: Limpar todas as notifica√ß√µes
  async clearAllNotifications(): Promise<boolean> {
    try {
      const token = await getToken();
      if (!token) return false;

      const response = await fetch(`${resolvedApiBaseUrl}/notifications/clear-all`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
      });

      if (response.ok) {
        console.log('‚úÖ Todas as notifica√ß√µes foram limpas');
        return true;
      } else {
        console.log('‚ùå Erro ao limpar todas as notifica√ß√µes:', response.status);
        return false;
      }
    } catch (error) {
      console.log('‚ùå Erro de conex√£o ao limpar notifica√ß√µes:', error);
      return false;
    }
  }
  
};

// DEBUG: Verificar se a fun√ß√£o est√° sendo exportada corretamente
console.log('üîç [DEBUG] notificationService.markAllAsRead:', typeof notificationService.markAllAsRead);

